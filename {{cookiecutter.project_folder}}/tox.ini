[tox]
envlist = py{38,39}
deps =
    pip

# To execute all tests with tox on your local python interpreter, install tox and run "tox -e py"
[testenv]
description = Run all the tests with pytest under {basepython}
extras =
    tests
# We use "python -m pytest ..." instead of "pytest ..." so that the CLI used is the one of
# the venv created by tox. With "pytest ...", globally installed CLI would be used if pytest
# CLI was not available in the venv created by tox.
commands =
    # Tests can be run on a single file: `tox -e py <path to test file>`
    # posargs makes it possible to pass arguments to pytest:
    # Example1: run only tests whose name matches a specific pattern: `tox -e py -- -k "<pattern>"`
    # Example2: run only tests whose name does not match a specific pattern: `tox -e py -- -k "not <pattern>"`
    python -m pytest {posargs} --cov={{ cookiecutter.package_name }} --cov-config=tox.ini

# Build check
[testenv:build]
skip_install = true
deps =
    wheel~=0.37.0
    setuptools~=59.2.0
    twine~=3.6.0
commands =
    python setup.py sdist bdist_wheel
    python -m twine check dist/*

# To execute any linter, install tox and run with this syntax : "tox -e bandit"
[testenv:bandit]
skip_install = true
deps =
    bandit~=1.7.4
commands =
    python -m bandit --exclude=tests {{ cookiecutter.package_name }} -r
    # Assert statements are accepted in tests
    python -m bandit tests -r -s B101

[testenv:safety]
extras =
    tests
    dev
    docs
    linters
    build
deps =
    safety~=2.0.0
commands =
    python -m safety check --full-report

[testenv:black]
skip_install = true
deps =
    black~=22.6.0
commands =
    python -m black --check --config=pyproject.toml {{ cookiecutter.package_name }} tests --verbose

[testenv:black-run]
skip_install = true
deps =
    {[testenv:black]deps}
commands =
    python -m black --config=pyproject.toml {{ cookiecutter.package_name }} tests

[testenv:isort]
skip_install = true
deps =
    isort~=5.10.1
commands =
    python -m isort --check --settings-path=pyproject.toml {{ cookiecutter.package_name }} tests --verbose

[testenv:isort-run]
skip_install = true
deps =
    {[testenv:isort]deps}
commands =
    python -m isort --settings-path=pyproject.toml {{ cookiecutter.package_name }} tests

[testenv:flake8]
skip_install = true
deps =
    flake8~=4.0.1
    darglint~=1.8.1
commands =
    # Package code is expected to have docstrings that pass darglint checks
    python -m flake8 --config=setup.cfg {{ cookiecutter.package_name }}
    # Tests are not expected to have docstrings or conform to darglint
    python -m flake8 --config=setup.cfg --extend-ignore=DAR tests

[testenv:pylint]
deps =
    pylint~=2.14.4
commands =
    python -m pylint {{ cookiecutter.package_name }} --rcfile .pylintrc
    python -m pylint tests --rcfile .pylintrc --disable C0114,C0115,C0116,R0201,R0903,W0106,W0621

[testenv:spelling]
deps =
    {[testenv:pylint]deps}
    pyenchant~=3.2.2
commands =
    python -m pylint {{ cookiecutter.package_name }} tests --disable=all --enable=spelling --spelling-private-dict-file=spelling/spelling.txt --spelling-dict=en_US
    python spelling/spelling_sort.py

[testenv:update-spelling]
deps =
    {[testenv:spelling]deps}
commands =
    python -m pylint {{ cookiecutter.package_name }} tests --disable=all --enable=spelling --spelling-private-dict-file=spelling/spelling.txt --spelling-store-unknown-words=y --spelling-dict=en_US
    # Sorting the custom dictionary isn't done here because otherwise it is hard to select new words
    # Without the sort, new words are just appended at the end of the dictionary

[testenv:mypy]
deps =
    mypy~=0.910
commands =
    python -m mypy --config-file tox.ini --show-error-codes {{ cookiecutter.package_name }} tests


# Notebooks
[testenv:install-kernel]
extras =
    # So the kernel is able to be used to run notebooks in the CI
    notebooks
deps =
    ipykernel~=6.15.1
    jupyter~=1.0.0 # This appears to be necessary to call `ipython` commands in the CI
commands =
    ipython kernel install --user --name={{ cookiecutter.project_folder }}

[testenv:strip-notebooks]
skip_install = true
deps =
    nbconvert~=6.5.0
commands =
    jupyter nbconvert --clear-output --inplace {posargs:notebooks/*}

[testenv:run-notebooks]
skip_install = true
deps =
    {[testenv:strip-notebooks]deps}
commands =
    jupyter nbconvert --execute --to=notebook --inplace {posargs:notebooks/*} --ExecutePreprocessor.kernel_name={{ cookiecutter.project_folder }}

[testenv:check-notebooks]
skip_install = true
deps =
    nbqa~=1.2.1              # Allows us to use linters on notebooks
    autoflake~=1.4           # Detect and remove unused imports
    {[testenv:isort]deps}    # Sort the imports
    {[testenv:black]deps}    # Format the code according to pep8 and using the project config
commands =
    python -m nbqa autoflake --check --remove-all-unused-imports {posargs:notebooks/}
    python -m nbqa isort --check --settings-path=pyproject.toml {posargs:notebooks/}
    python -m nbqa black --check --config=pyproject.toml {posargs:notebooks/}

[testenv:lint-notebooks]
skip_install = true
deps =
    {[testenv:check-notebooks]deps}
commands =
    python -m nbqa autoflake --in-place --remove-all-unused-imports {posargs:notebooks/}
    python -m nbqa isort --settings-path=pyproject.toml {posargs:notebooks/}
    python -m nbqa black --config=pyproject.toml {posargs:notebooks/}

{%- if cookiecutter.documentation == "y" %}

[testenv:docs]
extras =
    docs
commands =
    sphinx-build docs docs/_build

{%- endif %}

[testenv:release]
# This environment relies heavily on the [testenv:build] environment, see above for its content
# "passenv" ensures the environment variables are passed to the virtualenv created to run twine
# Python inline script cleans the previously created distribution if any
# "dist/*" uploads both the source distribution and the wheels
skip_install = true
deps =
    {[testenv:build]deps}
passenv =
    TWINE_REPOSITORY_URL
    TWINE_USERNAME
    TWINE_PASSWORD
commands =
    python -c "import shutil; shutil.rmtree(path='dist', ignore_errors=True)"
    {[testenv:build]commands}
    python -m pip freeze --all > all-requirements.txt
    python -m twine upload dist/*

[pytest]
addopts = -vv
testpaths = tests
env =
    LOG_LEVEL_.=DEBUG

[coverage:run]
branch = true
omit = {{ cookiecutter.package_name }}/plot_params.py

[coverage:report]
skip_covered = False
show_missing = True
exclude_lines =
    \#\s*pragma: no cover
    ^if __name__ == ["]__main__["]:$

[mypy]
# Common library to most of our projects are listed, but feel free to remove unnecessary entries
# And to add your dependencies that do not provide type stubs
[mypy-matplotlib.*,pandas.*,pytest.*,sklearn.*]
ignore_missing_imports = True