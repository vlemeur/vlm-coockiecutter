
[metadata]
name = {{ cookiecutter.package_name }}
author = {{ cookiecutter.author }}
author-email = {{ cookiecutter.email }}
home-page = {{ cookiecutter.repository_url }}
description = {{ cookiecutter.project_short_description }}
long-description = file: README.md
long_description_content_type = text/markdown
license = PRIVATE
classifiers =
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9

[options]
packages = find:
zip_safe = false
include_package_data = true
python_requires = >= 3.8
test_suite = pytest
install_requires =

[options.extras_require]
tests =
    pytest~=6.2.2
    pytest-env~=0.6.2
    pytest-cov~=2.11.1

dev =
    pre-commit~=2.10.0
    tox~=3.24.4

# Notebooks extras are necessary to run `install-kernel` command.
notebooks =
    ipykernel~=6.15.1
    nb-black~=1.0.7

{%- if cookiecutter.documentation == "y" %}

docs =
    sphinx>=4.0.3
    sphinx-autodoc-typehints>=1.12.0
    sphinx-rtd-theme>=0.5.2
    myst-parser>=0.15.1
    sphinx-autoapi>=1.8.4

{%- endif %}

# Serves as a source of truth for tox.ini linter dependencies
# Also used by safety to check all dependencies of the project for vulnerabilities
linters =
    bandit~=1.7.4
    black~=22.6.0
    isort~=5.10.1
    flake8~=4.0.1
    darglint~=1.8.1
    pylint~=2.14.4
    pyenchant~=3.2.2
    mypy~=0.910
    nbconvert~=6.3.0
    nbqa~=1.2.1
    autoflake~=1.4
    ipykernel~=6.15.1 # Already in notebooks, but allows for only one extras for all tox dependencies

# Serves as a source of truth for pyproject.toml and tox.ini build dependencies
# Also used by safety to check all dependencies of the project for vulnerabilities
build =
    wheel~=0.37.0
    setuptools~=59.2.0
    twine~=3.6.0

[options.packages.find]
exclude = tests

[bdist_wheel]
universal = True

[flake8]
output-file=flake8_report.txt
ignore=TAE001,E303,E203,W503
max-line-length=120

# Darglint is a flake8 plugin to validate docstrings, but it can be configured individually from flake8
[darglint]
docstring_style = numpy