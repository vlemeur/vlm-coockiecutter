[tox]
envlist = py{38,39}
deps =
    pip

# To execute all tests with tox on your local python interpreter, install tox and run "tox -e py"
[testenv]
description = Run all the tests with pytest under {basepython}
extras =
    tests
# We use "python -m pytest ..." instead of "pytest ..." so that the CLI used is the one of
# the venv created by tox. With "pytest ...", globally installed CLI would be used if pytest
# CLI was not available in the venv created by tox.
commands =
    python -m pytest

# Build check
[testenv:build]
skip_install = true
deps =
    wheel~=0.37.0
    setuptools~=59.2.0
    twine~=3.6.0
commands =
    python setup.py sdist bdist_wheel
    python -m twine check dist/*

# To execute any linter, install tox and run with this syntax : "tox -e bandit"
[testenv:bandit]
skip_install = true
deps =
    bandit~=1.7.0
commands =
    python -m bandit tests -r -s B101

[testenv:safety]
extras = 
    tests
    dev
    docs
    linters
    build
deps =
    safety~=1.10.3
commands = 
    python -m safety check --full-report

[testenv:black]
skip_install = true
deps =
    black~=21.11b1
commands =
    python -m black --check --config=pyproject.toml tests/ --verbose

[testenv:black-run]
skip_install = true
deps =
    {[testenv:black]deps}
commands =
    python -m black --config=pyproject.toml tests/

[testenv:isort]
skip_install = true
deps =
    isort~=5.10.1
commands =
    python -m isort --check --settings-path=pyproject.toml tests/ --verbose

[testenv:isort-run]
skip_install = true
deps =
    {[testenv:isort]deps}
commands =
    python -m isort --settings-path=pyproject.toml tests/

[testenv:flake8]
skip_install = true
deps =
    flake8~=4.0.1
commands =
    python -m flake8 --config=setup.cfg tests/

[testenv:pylint]
deps =
    pylint~=2.11.1
commands =
    python -m pylint tests --rcfile .pylintrc --disable C0114,C0115,C0116,R0201,R0903,W0106,W0621

[testenv:spelling]
deps =
    {[testenv:pylint]deps}
    pyenchant~=3.2.1
commands =
    python -m pylint tests --disable=all --enable=spelling --spelling-private-dict-file=\{\{cookiecutter.project_folder\}\}/spelling/spelling.txt --spelling-dict=en_US
    python \{\{cookiecutter.project_folder\}\}/spelling/spelling_sort.py

[testenv:update-spelling]
deps =
    {[testenv:spelling]deps}
commands =
    python -m pylint tests --disable=all --enable=spelling --spelling-private-dict-file=\{\{cookiecutter.project_folder\}\}/spelling/spelling.txt --spelling-store-unknown-words=y --spelling-dict=en_US
    # Sorting the custom dictionary isn't done here because otherwise it is hard to select new words
    # Without the sort, new words are just appended at the end of the dictionary

[testenv:mypy]
deps =
    mypy~=0.910
commands =
    python -m mypy --config-file tox.ini --show-error-codes tests

[testenv:release]
# This environment relies heavily on the [testenv:build] environment, see above for its content
# "passenv" ensures the environment variables are passed to the virtualenv created to run twine
# Python inline script cleans the previously created distribution if any
# "dist/*" uploads both the source distribution and the wheels
skip_install = true
deps =
    {[testenv:build]deps}
passenv =
    TWINE_REPOSITORY_URL
    TWINE_USERNAME
    TWINE_PASSWORD
commands =
    python -c "import shutil; shutil.rmtree(path='dist', ignore_errors=True)"
    {[testenv:build]commands}
    pip freeze --all > all-requirements.txt
    twine upload dist/*

[pytest]
addopts = -vv
testpaths = tests
env =
    LOG_LEVEL_.=DEBUG

[mypy]
[mypy-cookiecutter.*, sh.*]
ignore_missing_imports = True
